// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pizzashop.Models;

#nullable disable

namespace pizzashop.Migrations
{
    [DbContext(typeof(PizzashopContext))]
    partial class PizzashopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pizzashop.Models.AssignTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<int>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.HasKey("Id")
                        .HasName("assign_table_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SectionId");

                    b.HasIndex("TableId");

                    b.ToTable("assign_table", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("category_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex(new[] { "Category1" }, "category_category_key")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.HasKey("Id")
                        .HasName("city_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StateId");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("country_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Phone")
                        .HasColumnType("integer")
                        .HasColumnName("phone");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("integer")
                        .HasColumnName("total_order");

                    b.HasKey("Id")
                        .HasName("customers_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.CustomerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageBill")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("average_bill");

                    b.Property<DateTime>("ComingSince")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("coming_since");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("MaxOrder")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("max_order");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("Visits")
                        .HasColumnType("integer")
                        .HasColumnName("visits");

                    b.HasKey("Id")
                        .HasName("customer_history_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("customer_history", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("OrderModified")
                        .HasColumnType("integer")
                        .HasColumnName("order_modified");

                    b.Property<int>("OrdertaxId")
                        .HasColumnType("integer")
                        .HasColumnName("ordertax_id");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<int>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.HasKey("Id")
                        .HasName("invoice_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderModified");

                    b.HasIndex("OrdertaxId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TableId");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Itemmodifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("items_id");

                    b.Property<int>("Maximumselection")
                        .HasColumnType("integer")
                        .HasColumnName("maximumselection");

                    b.Property<int>("Minimumselection")
                        .HasColumnType("integer")
                        .HasColumnName("minimumselection");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedat");

                    b.Property<int>("ModifiersId")
                        .HasColumnType("integer")
                        .HasColumnName("modifiers_id");

                    b.HasKey("Id")
                        .HasName("itemmodifier_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ItemsId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ModifiersId");

                    b.ToTable("itemmodifier", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean")
                        .HasColumnName("available");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("DefaultTax")
                        .HasColumnType("boolean")
                        .HasColumnName("default_tax");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer")
                        .HasColumnName("item_type");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Rate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("rate");

                    b.Property<int?>("ShortCode")
                        .HasColumnType("integer")
                        .HasColumnName("short_code");

                    b.Property<decimal?>("Taxpercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("taxpercentage");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("menu_items_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "Name" }, "menu_items_name_key")
                        .IsUnique();

                    b.ToTable("menu_items", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.MenuModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("ModifierGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("modifier_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Rate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("rate");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("menu_modifier_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ModifierGroupId");

                    b.HasIndex("UnitId");

                    b.ToTable("menu_modifier", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.ModifiedOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("ModifiedName")
                        .HasColumnType("integer")
                        .HasColumnName("modified_name");

                    b.Property<decimal?>("ModifierRate")
                        .HasColumnType("numeric")
                        .HasColumnName("modifier_rate");

                    b.Property<int?>("Modifierquantity")
                        .HasColumnType("integer")
                        .HasColumnName("modifierquantity");

                    b.Property<decimal>("Modifiertax")
                        .HasColumnType("numeric")
                        .HasColumnName("modifiertax");

                    b.Property<int>("OrdersItemDetailsId")
                        .HasColumnType("integer")
                        .HasColumnName("orders_item_details_id");

                    b.HasKey("Id")
                        .HasName("modified_order_detail_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ModifiedName");

                    b.HasIndex("OrdersItemDetailsId");

                    b.ToTable("modified_order_detail", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.ModifiersGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("modifiers_group_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("modifiers_group", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("ItemsOrdered")
                        .HasColumnType("integer")
                        .HasColumnName("items_ordered");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer")
                        .HasColumnName("order_type");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<int?>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.Property<string>("SpecialInstruction")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("special_instruction");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("orders_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RatingId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.OrderTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("ModifiedOrderDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("modified_order_detail_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("OrdersItemDetailsId")
                        .HasColumnType("integer")
                        .HasColumnName("orders_item_details_id");

                    b.Property<int>("TaxId")
                        .HasColumnType("integer")
                        .HasColumnName("tax_id");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("order_tax_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ModifiedOrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrdersItemDetailsId");

                    b.HasIndex("TaxId");

                    b.ToTable("order_tax", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Ordersitemdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Instruction")
                        .HasColumnType("text")
                        .HasColumnName("instruction");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int?>("Itemquantity")
                        .HasColumnType("integer")
                        .HasColumnName("itemquantity");

                    b.Property<decimal?>("Itemrate")
                        .HasColumnType("numeric")
                        .HasColumnName("itemrate");

                    b.Property<int?>("Itemready")
                        .HasColumnType("integer")
                        .HasColumnName("itemready");

                    b.Property<int>("ItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("items_id");

                    b.Property<decimal>("Itemtax")
                        .HasColumnType("numeric")
                        .HasColumnName("itemtax");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedat");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.HasKey("Id")
                        .HasName("ordersitemdetails_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ItemsId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OrderId");

                    b.ToTable("ordersitemdetails", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_mode");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("TaxId")
                        .HasColumnType("integer")
                        .HasColumnName("tax_id");

                    b.HasKey("Id")
                        .HasName("payments_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TaxId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permission1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("permission");

                    b.HasKey("Id")
                        .HasName("permissions_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ambience")
                        .HasColumnType("integer")
                        .HasColumnName("ambience");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("Food")
                        .HasColumnType("integer")
                        .HasColumnName("food");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("Service")
                        .HasColumnType("integer")
                        .HasColumnName("service");

                    b.HasKey("Id")
                        .HasName("ratings_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OrderId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex(new[] { "Role1" }, "role_role_key")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Roleswisepermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAddEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("can_add_edit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean")
                        .HasColumnName("can_view");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("roleswisepermissions_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("roleswisepermissions", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("sections_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("State1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("state_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("tables_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SectionId");

                    b.ToTable("tables", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Tableorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("Isavailable")
                        .HasColumnType("boolean")
                        .HasColumnName("isavailable");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.HasKey("Id")
                        .HasName("tableorder_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OrderId");

                    b.HasIndex("TableId");

                    b.ToTable("tableorder", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.TaxesFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool?>("IsEnable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enable");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("tax_amount");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("taxes_fees_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex(new[] { "Name" }, "taxes_fees_name_key")
                        .IsUnique();

                    b.ToTable("taxes_fees", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<decimal>("NoOfPeople")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)")
                        .HasColumnName("no_of_people");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.HasKey("Id")
                        .HasName("tokens_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SectionId");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("Shortcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("shortcode");

                    b.HasKey("Id")
                        .HasName("unit_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("password");

                    b.Property<int?>("Phone")
                        .HasColumnType("integer")
                        .HasColumnName("phone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.Property<int?>("Zipcode")
                        .HasColumnType("integer")
                        .HasColumnName("zipcode");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.WaitingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<int>("TokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("token_no");

                    b.Property<TimeOnly>("WaitingTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("waiting_time");

                    b.HasKey("Id")
                        .HasName("waiting_list_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TokenNo");

                    b.ToTable("waiting_list", (string)null);
                });

            modelBuilder.Entity("pizzashop.Models.AssignTable", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("AssignTableCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("assign_table_created_by_fkey");

                    b.HasOne("pizzashop.Models.Customer", "Customer")
                        .WithMany("AssignTables")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("assign_table_customer_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("AssignTableModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("assign_table_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Section", "Section")
                        .WithMany("AssignTables")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("assign_table_section_id_fkey");

                    b.HasOne("pizzashop.Models.Table", "Table")
                        .WithMany("AssignTables")
                        .HasForeignKey("TableId")
                        .IsRequired()
                        .HasConstraintName("assign_table_table_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Section");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("pizzashop.Models.Category", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("CategoryCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("category_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("CategoryModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("category_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.City", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("CityCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("city_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("CityModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("city_modified_by_fkey");

                    b.HasOne("pizzashop.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("city_state_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("State");
                });

            modelBuilder.Entity("pizzashop.Models.Country", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("CountryCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("country_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("CountryModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("country_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Customer", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("CustomerCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("customers_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("CustomerModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("customers_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.CustomerHistory", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("CustomerHistoryCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("customer_history_created_by_fkey");

                    b.HasOne("pizzashop.Models.Customer", "Customer")
                        .WithMany("CustomerHistories")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("customer_history_customer_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("CustomerHistoryModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("customer_history_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Invoice", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("InvoiceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("invoice_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("InvoiceModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("invoice_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("invoice_order_id_fkey");

                    b.HasOne("pizzashop.Models.ModifiedOrderDetail", "OrderModifiedNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderModified")
                        .IsRequired()
                        .HasConstraintName("invoice_order_modified_fkey");

                    b.HasOne("pizzashop.Models.OrderTax", "Ordertax")
                        .WithMany("Invoices")
                        .HasForeignKey("OrdertaxId")
                        .IsRequired()
                        .HasConstraintName("invoice_ordertax_id_fkey");

                    b.HasOne("pizzashop.Models.Section", "Section")
                        .WithMany("Invoices")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("invoice_section_id_fkey");

                    b.HasOne("pizzashop.Models.Table", "Table")
                        .WithMany("Invoices")
                        .HasForeignKey("TableId")
                        .IsRequired()
                        .HasConstraintName("invoice_table_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Order");

                    b.Navigation("OrderModifiedNavigation");

                    b.Navigation("Ordertax");

                    b.Navigation("Section");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("pizzashop.Models.Itemmodifier", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("ItemmodifierCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("itemmodifier_created_by_fkey");

                    b.HasOne("pizzashop.Models.MenuItem", "Items")
                        .WithMany("Itemmodifiers")
                        .HasForeignKey("ItemsId")
                        .IsRequired()
                        .HasConstraintName("itemmodifier_items_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("ItemmodifierModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("itemmodifier_modified_by_fkey");

                    b.HasOne("pizzashop.Models.MenuModifier", "Modifiers")
                        .WithMany("Itemmodifiers")
                        .HasForeignKey("ModifiersId")
                        .IsRequired()
                        .HasConstraintName("itemmodifier_modifiers_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Items");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Modifiers");
                });

            modelBuilder.Entity("pizzashop.Models.MenuItem", b =>
                {
                    b.HasOne("pizzashop.Models.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("menu_items_category_id_fkey");

                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("MenuItemCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("menu_items_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("MenuItemModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("menu_items_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Unit", "Unit")
                        .WithMany("MenuItems")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("menu_items_unit_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("pizzashop.Models.MenuModifier", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("MenuModifierCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("menu_modifier_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("MenuModifierModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("menu_modifier_modified_by_fkey");

                    b.HasOne("pizzashop.Models.ModifiersGroup", "ModifierGroup")
                        .WithMany("MenuModifiers")
                        .HasForeignKey("ModifierGroupId")
                        .IsRequired()
                        .HasConstraintName("menu_modifier_modifier_group_id_fkey");

                    b.HasOne("pizzashop.Models.Unit", "UnitNavigation")
                        .WithMany("MenuModifiers")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("menu_modifier_unit_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ModifierGroup");

                    b.Navigation("UnitNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.ModifiedOrderDetail", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("ModifiedOrderDetailCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("modified_order_detail_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("ModifiedOrderDetailModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("modified_order_detail_modified_by_fkey");

                    b.HasOne("pizzashop.Models.MenuModifier", "ModifiedNameNavigation")
                        .WithMany("ModifiedOrderDetails")
                        .HasForeignKey("ModifiedName")
                        .IsRequired()
                        .HasConstraintName("modified_order_detail_modified_name_fkey");

                    b.HasOne("pizzashop.Models.Ordersitemdetail", "OrdersItemDetails")
                        .WithMany("ModifiedOrderDetails")
                        .HasForeignKey("OrdersItemDetailsId")
                        .IsRequired()
                        .HasConstraintName("modified_order_detail_orders_item_details_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ModifiedNameNavigation");

                    b.Navigation("OrdersItemDetails");
                });

            modelBuilder.Entity("pizzashop.Models.ModifiersGroup", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("ModifiersGroupCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("modifiers_group_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("ModifiersGroupModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("modifiers_group_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Order", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("OrderCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("orders_created_by_fkey");

                    b.HasOne("pizzashop.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("orders_customer_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("OrderModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("orders_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("orders_payment_id_fkey");

                    b.HasOne("pizzashop.Models.Rating", "Rating")
                        .WithMany("Orders")
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_orders_ratings");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Payment");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("pizzashop.Models.OrderTax", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("OrderTaxCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("order_tax_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("OrderTaxModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("order_tax_modified_by_fkey");

                    b.HasOne("pizzashop.Models.ModifiedOrderDetail", "ModifiedOrderDetail")
                        .WithMany("OrderTaxes")
                        .HasForeignKey("ModifiedOrderDetailId")
                        .IsRequired()
                        .HasConstraintName("order_tax_modified_order_detail_id_fkey");

                    b.HasOne("pizzashop.Models.Order", "Order")
                        .WithMany("OrderTaxes")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("order_tax_order_id_fkey");

                    b.HasOne("pizzashop.Models.Ordersitemdetail", "OrdersItemDetails")
                        .WithMany("OrderTaxes")
                        .HasForeignKey("OrdersItemDetailsId")
                        .IsRequired()
                        .HasConstraintName("order_tax_orders_item_details_id_fkey");

                    b.HasOne("pizzashop.Models.TaxesFee", "Tax")
                        .WithMany("OrderTaxes")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("order_tax_tax_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ModifiedOrderDetail");

                    b.Navigation("Order");

                    b.Navigation("OrdersItemDetails");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("pizzashop.Models.Ordersitemdetail", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("OrdersitemdetailCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("ordersitemdetails_created_by_fkey");

                    b.HasOne("pizzashop.Models.MenuItem", "Items")
                        .WithMany("Ordersitemdetails")
                        .HasForeignKey("ItemsId")
                        .IsRequired()
                        .HasConstraintName("ordersitemdetails_items_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("OrdersitemdetailModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("ordersitemdetails_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Order", "Order")
                        .WithMany("Ordersitemdetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("ordersitemdetails_order_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Items");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("pizzashop.Models.Payment", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("PaymentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("payments_created_by_fkey");

                    b.HasOne("pizzashop.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("fk_payments_invoice");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("PaymentModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("payments_modified_by_fkey");

                    b.HasOne("pizzashop.Models.OrderTax", "Tax")
                        .WithMany("Payments")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("fk_payments_order_tax");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Invoice");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("pizzashop.Models.Permission", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("PermissionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("permissions_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("PermissionModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("permissions_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Rating", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("RatingCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("ratings_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("RatingModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("ratings_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Order", "Order")
                        .WithMany("Ratings")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("ratings_order_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("pizzashop.Models.Role", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("RoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("role_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("RoleModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("role_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Roleswisepermission", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("RoleswisepermissionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("roleswisepermissions_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("RoleswisepermissionModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("roleswisepermissions_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Permission", "Permission")
                        .WithMany("Roleswisepermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("roleswisepermissions_permission_id_fkey");

                    b.HasOne("pizzashop.Models.Role", "Role")
                        .WithMany("Roleswisepermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("roleswisepermissions_role_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("pizzashop.Models.Section", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("SectionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("sections_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("SectionModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("sections_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.State", b =>
                {
                    b.HasOne("pizzashop.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("state_country_id_fkey");

                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("StateCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("state_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("StateModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("state_modified_by_fkey");

                    b.Navigation("Country");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Table", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("TableCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("tables_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("TableModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("tables_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Section", "Section")
                        .WithMany("Tables")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("tables_section_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("pizzashop.Models.Tableorder", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("TableorderCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("tableorder_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("TableorderModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("tableorder_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Order", "Order")
                        .WithMany("Tableorders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("tableorder_order_id_fkey");

                    b.HasOne("pizzashop.Models.Table", "Table")
                        .WithMany("Tableorders")
                        .HasForeignKey("TableId")
                        .IsRequired()
                        .HasConstraintName("tableorder_table_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Order");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("pizzashop.Models.TaxesFee", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("TaxesFeeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("taxes_fees_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("TaxesFeeModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("taxes_fees_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Token", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("TokenCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("tokens_created_by_fkey");

                    b.HasOne("pizzashop.Models.Customer", "Customer")
                        .WithMany("Tokens")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("tokens_customer_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("TokenModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("tokens_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Section", "Section")
                        .WithMany("Tokens")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("tokens_section_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("pizzashop.Models.Unit", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("UnitCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("unit_created_by_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("UnitModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("unit_modified_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.User", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_users_createdby");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("InverseModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_users_modifiedby");

                    b.HasOne("pizzashop.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_users_role");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("pizzashop.Models.WaitingList", b =>
                {
                    b.HasOne("pizzashop.Models.User", "CreatedByNavigation")
                        .WithMany("WaitingListCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("waiting_list_created_by_fkey");

                    b.HasOne("pizzashop.Models.Customer", "Customer")
                        .WithMany("WaitingLists")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("waiting_list_customer_id_fkey");

                    b.HasOne("pizzashop.Models.User", "ModifiedByNavigation")
                        .WithMany("WaitingListModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("waiting_list_modified_by_fkey");

                    b.HasOne("pizzashop.Models.Token", "TokenNoNavigation")
                        .WithMany("WaitingLists")
                        .HasForeignKey("TokenNo")
                        .IsRequired()
                        .HasConstraintName("waiting_list_token_no_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("TokenNoNavigation");
                });

            modelBuilder.Entity("pizzashop.Models.Category", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("pizzashop.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("pizzashop.Models.Customer", b =>
                {
                    b.Navigation("AssignTables");

                    b.Navigation("CustomerHistories");

                    b.Navigation("Orders");

                    b.Navigation("Tokens");

                    b.Navigation("WaitingLists");
                });

            modelBuilder.Entity("pizzashop.Models.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("pizzashop.Models.MenuItem", b =>
                {
                    b.Navigation("Itemmodifiers");

                    b.Navigation("Ordersitemdetails");
                });

            modelBuilder.Entity("pizzashop.Models.MenuModifier", b =>
                {
                    b.Navigation("Itemmodifiers");

                    b.Navigation("ModifiedOrderDetails");
                });

            modelBuilder.Entity("pizzashop.Models.ModifiedOrderDetail", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderTaxes");
                });

            modelBuilder.Entity("pizzashop.Models.ModifiersGroup", b =>
                {
                    b.Navigation("MenuModifiers");
                });

            modelBuilder.Entity("pizzashop.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderTaxes");

                    b.Navigation("Ordersitemdetails");

                    b.Navigation("Ratings");

                    b.Navigation("Tableorders");
                });

            modelBuilder.Entity("pizzashop.Models.OrderTax", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("pizzashop.Models.Ordersitemdetail", b =>
                {
                    b.Navigation("ModifiedOrderDetails");

                    b.Navigation("OrderTaxes");
                });

            modelBuilder.Entity("pizzashop.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("pizzashop.Models.Permission", b =>
                {
                    b.Navigation("Roleswisepermissions");
                });

            modelBuilder.Entity("pizzashop.Models.Rating", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("pizzashop.Models.Role", b =>
                {
                    b.Navigation("Roleswisepermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("pizzashop.Models.Section", b =>
                {
                    b.Navigation("AssignTables");

                    b.Navigation("Invoices");

                    b.Navigation("Tables");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("pizzashop.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("pizzashop.Models.Table", b =>
                {
                    b.Navigation("AssignTables");

                    b.Navigation("Invoices");

                    b.Navigation("Tableorders");
                });

            modelBuilder.Entity("pizzashop.Models.TaxesFee", b =>
                {
                    b.Navigation("OrderTaxes");
                });

            modelBuilder.Entity("pizzashop.Models.Token", b =>
                {
                    b.Navigation("WaitingLists");
                });

            modelBuilder.Entity("pizzashop.Models.Unit", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("MenuModifiers");
                });

            modelBuilder.Entity("pizzashop.Models.User", b =>
                {
                    b.Navigation("AssignTableCreatedByNavigations");

                    b.Navigation("AssignTableModifiedByNavigations");

                    b.Navigation("CategoryCreatedByNavigations");

                    b.Navigation("CategoryModifiedByNavigations");

                    b.Navigation("CityCreatedByNavigations");

                    b.Navigation("CityModifiedByNavigations");

                    b.Navigation("CountryCreatedByNavigations");

                    b.Navigation("CountryModifiedByNavigations");

                    b.Navigation("CustomerCreatedByNavigations");

                    b.Navigation("CustomerHistoryCreatedByNavigations");

                    b.Navigation("CustomerHistoryModifiedByNavigations");

                    b.Navigation("CustomerModifiedByNavigations");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseModifiedByNavigation");

                    b.Navigation("InvoiceCreatedByNavigations");

                    b.Navigation("InvoiceModifiedByNavigations");

                    b.Navigation("ItemmodifierCreatedByNavigations");

                    b.Navigation("ItemmodifierModifiedByNavigations");

                    b.Navigation("MenuItemCreatedByNavigations");

                    b.Navigation("MenuItemModifiedByNavigations");

                    b.Navigation("MenuModifierCreatedByNavigations");

                    b.Navigation("MenuModifierModifiedByNavigations");

                    b.Navigation("ModifiedOrderDetailCreatedByNavigations");

                    b.Navigation("ModifiedOrderDetailModifiedByNavigations");

                    b.Navigation("ModifiersGroupCreatedByNavigations");

                    b.Navigation("ModifiersGroupModifiedByNavigations");

                    b.Navigation("OrderCreatedByNavigations");

                    b.Navigation("OrderModifiedByNavigations");

                    b.Navigation("OrderTaxCreatedByNavigations");

                    b.Navigation("OrderTaxModifiedByNavigations");

                    b.Navigation("OrdersitemdetailCreatedByNavigations");

                    b.Navigation("OrdersitemdetailModifiedByNavigations");

                    b.Navigation("PaymentCreatedByNavigations");

                    b.Navigation("PaymentModifiedByNavigations");

                    b.Navigation("PermissionCreatedByNavigations");

                    b.Navigation("PermissionModifiedByNavigations");

                    b.Navigation("RatingCreatedByNavigations");

                    b.Navigation("RatingModifiedByNavigations");

                    b.Navigation("RoleCreatedByNavigations");

                    b.Navigation("RoleModifiedByNavigations");

                    b.Navigation("RoleswisepermissionCreatedByNavigations");

                    b.Navigation("RoleswisepermissionModifiedByNavigations");

                    b.Navigation("SectionCreatedByNavigations");

                    b.Navigation("SectionModifiedByNavigations");

                    b.Navigation("StateCreatedByNavigations");

                    b.Navigation("StateModifiedByNavigations");

                    b.Navigation("TableCreatedByNavigations");

                    b.Navigation("TableModifiedByNavigations");

                    b.Navigation("TableorderCreatedByNavigations");

                    b.Navigation("TableorderModifiedByNavigations");

                    b.Navigation("TaxesFeeCreatedByNavigations");

                    b.Navigation("TaxesFeeModifiedByNavigations");

                    b.Navigation("TokenCreatedByNavigations");

                    b.Navigation("TokenModifiedByNavigations");

                    b.Navigation("UnitCreatedByNavigations");

                    b.Navigation("UnitModifiedByNavigations");

                    b.Navigation("WaitingListCreatedByNavigations");

                    b.Navigation("WaitingListModifiedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
