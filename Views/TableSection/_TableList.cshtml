@model pizzashop.Models.ViewModels.PaginatedTableViewModel
@{
    var TableExist = TempData["TableExist"] as string;
    var TableAdd = TempData["TableAdd"] as string;
    var TableEdit = TempData["TableEdit"] as string;
    var TableIsDeleted = TempData["TableIsDeleted"] as string;
}
<div class="table-responsive">
    <table class="tableList table align-middle table">
        <thead>
            <tr>
                <th scope="col">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="selectAllCheckbox" >
                    </div>
                </th>
                <th scope="col">Name</th>
                <th scope="col">Capacity</th>
                <th scope="col">Status</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">

            @{
                foreach (var table in Model.tables)
                {
                    <tr>
                        <td>
                            <div class="form-check">
                                <input class="form-check-input checkboxes" type="checkbox" value="" id="flexCheckDefault"
                                    data-id="@table.Id">
                            </div>
                        </td>
                        <td>
                            <div class="listImgField">
                                @table.Name
                            </div>
                        </td>
                        <td>@table.Capacity</td>
                        @if(table.Status == true){
                            <td>
                                <div class="table-status" style="color: white;background-color: rgba(114,123,131,255);">Available</div>
                            </td>
                        }
                        @if(table.Status != true){
                            <td>
                                <div class="table-status" style="color: white;background-color: rgba(114,123,131,255);">Occupied</div>
                            </td>
                        }
                        
                        <td>
                            <div>
                                <button class="menubtn loadEditModalBtn" data-id="@table.Id"
                                    onclick="EditTableModal(@table.Id)"><i class="bi bi-pen"></i></button>
                                <button class="menubtn" onclick="DeleteTableModal(@table.Id)"><i
                                        class="bi bi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div class="customPagination d-flex flex-column align-items-center mt-1">
    <div class="d-flex align-items-center w-100 justify-content-end mb-2">
        <div class="d-flex align-items-center me-auto me-sm-3">
            <div class="me-sm-2" style="min-width: 7rem;">Items per page:</div>
            <select id="pageSizeSelect" class="form-select">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
            </select>
        </div>
        <div class="d-none d-sm-block me-sm-2">
            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1)-@(Math.Min(Model.CurrentPage * Model.PageSize,
            Model.TotalItems)) of @Model.TotalItems
        </div>
        <div>
            <button id="prevPageBtn" class="me-2" @(Model.CurrentPage == 1 ? "disabled" : "")>
                <i class="bi bi-chevron-left"></i>
            </button>
            <button id="nextPageBtn" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    </div>
    <div class="d-block d-sm-none">
        Showing @((Model.CurrentPage - 1) * Model.PageSize + 1)-@(Math.Min(Model.CurrentPage * Model.PageSize,
                Model.TotalItems)) of @Model.TotalItems
    </div>
</div>

@if (!string.IsNullOrEmpty(TableExist))
{
    <script>
        toastr.error('@TableExist');
    </script>
}
@if (!string.IsNullOrEmpty(TableEdit))
{
    <script>
        toastr.success('@TableEdit');
    </script>
}
@if (!string.IsNullOrEmpty(TableIsDeleted))
{
    <script>
        toastr.success('@TableIsDeleted');
    </script>
}
@if (!string.IsNullOrEmpty(TableAdd))
{
    <script>
        toastr.success('@TableAdd');
    </script>
}




<script>
    document.getElementById('selectAllCheckbox').addEventListener('change', function () {
        let checkboxes = document.querySelectorAll('.checkboxes');
        checkboxes.forEach(function (checkbox) {
            checkbox.checked = this.checked;
        }, this);
    });

</script>

<script>

    if (typeof currentStateTable === "undefined") {
    const currentStateTable = {
        SectionId: @Html.Raw(Model.sectionId.HasValue ? Model.sectionId.Value.ToString() : "null"),
        searchTerm: "@Html.Raw(Model.SearchTerm ?? "")",
        currentPage: @Model.CurrentPage,
        pageSize: @Model.PageSize
    }; 
}
</script>

