<div class="modal fade" style="margin-top: 6%;" tabindex="-1" aria-labelledby="exampleModalLabel"
    id="SelectExistingModifiersModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title fs-5" id="exampleModalLabel">Select Existing Modifier</h3>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body"
                style="display: flex;flex-direction: column; align-items: center;justify-content: center;">
                <div style="">
                    <form style="position: relative;margin-right: 10px;">
                        <input type="search" id="searchInputt" placeholder="  Search" aria-label="Search"
                            class="form-control searchInputclass" style="width: 200px;height: 52px;margin-right: 2px; border: 2px solid #eee;
                                border-radius: 4px;">

                        <i class="bi bi-search" style="position: absolute;right: 10px;top: 15px;"></i>
                    </form>
                </div>
                <div id="ExisintModifiersContainer"></div>

                <div class="modal-footer">
                    <button type="button" id="saveSelectedModifiers" class="btn btn-primary"
                        data-bs-dismiss="modal">Save</button>
                    <button type="button" class="btn btn-secondary" id="closeExistingModifiersModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {

        let currentStateExistingModifier = {
            searchTerm: '',
            currentPage: 1,
            pageSize: 5
        };


        $('#searchInputt').on('keyup', function () {
            const searchTerm = $(this).val().trim();
            currentStateExistingModifier.searchTerm = searchTerm;
            currentStateExistingModifier.currentPage = 1;


            clearTimeout($(this).data('timeout'));
            $(this).data('timeout', setTimeout(function () {
                loadExistingMenuModifiers();
            }, 500));
        });


        $(document).on('change', '#pageSizeSelecttable', function () {
            currentStateExistingModifier.pageSize = parseInt($(this).val());
            currentStateExistingModifier.currentPage = 1;
            loadExistingMenuModifiers();
        });


        $(document).on('click', '#prevPageBtn2:not([disabled])', function () {
            currentStateExistingModifier.currentPage--;
            loadExistingMenuModifiers();
        });


        $(document).on('click', '#nextPageBtn2:not([disabled])', function () {
            currentStateExistingModifier.currentPage++;
            loadExistingMenuModifiers();
        });


        function loadExistingMenuModifiers() {
            $.ajax({
                url: '/Modifiers/SearchItemsForExistingModifier',
                type: 'GET',
                data: {
                    searchTerm: currentStateExistingModifier.searchTerm,
                    page: currentStateExistingModifier.currentPage,
                    pageSize: currentStateExistingModifier.pageSize
                },
                success: function (result) {
                    $('#ExisintModifiersContainer').html(result);

                    $('#pageSizeSelecttable').val(currentStateExistingModifier.pageSize);
                },
                error: function (xhr, status, error) {
                    console.log("Error: " + error);
                }
            });
        }

        $('#closeExistingModifiersModal').on('click', function () {
            $('#SelectExistingModifiersModal').modal('hide');
        });

        try {
            loadExistingMenuModifiers();
        } catch (e) {
            console.error("Error loading modifiers", e);
        }



        $('#saveSelectedModifiers').on('click', function () {
            const selectedModifiers = [];

            $('.checkboxes:checked').each(function () {
                const id = $(this).data('id');
                const name = $(this).closest('tr').find('td:eq(1)').text().trim();
                const unit = $(this).closest('tr').find('td:eq(2)').text().trim();
                const rate = $(this).closest('tr').find('td:eq(3)').text().trim();
                const quantity = $(this).closest('tr').find('td:eq(4)').text().trim();

                selectedModifiers.push({
                    id: id,
                    name: name,
                    unit: unit,
                    rate: rate,
                    quantity: quantity
                });
            });

            if (selectedModifiers.length > 0) {
                // Add the selected modifiers to the temporary display container
                displayTempSelectedModifiers(selectedModifiers);
                $('#SelectExistingModifiersModal').modal('hide');
            }
            else {
                toastr.error('Please select at least one modifier');
            }
        });


        function displayTempSelectedModifiers(modifiers) {
            @* 
            const existingModifierIds = [];
            $('#tempSelectedModifiers .modifier').each(function () {
                existingModifierIds.push($(this).data('id'));
            }); *@

                @* const newModifiers = modifiers.filter(modifier =>
                !window.existingModifierIds.includes(modifier)
            ); *@

                @* const newModifiers = modifiers.filter(modifier =>
                    !window.existingModifierIds.includes(modifier.id) && modifier => !window.existingModifierName.includes(modifier.name)
                ); *@

                @* if (window.newModifiers) {
                newModifiers = modifiers.filter(modifier => !newModifiers.name);
            } *@

                @* const newModifiers = modifiers.filter(modifier =>
                    !window.existingModifierIds.includes(modifier.id) &&
                    !window.existingModifierName.includes(modifier.name) &&
                    !newModifiers.includes(newModifier)
                ); *@


                const newModifiers = [];
            if (!window.seenModifierIds && !window.seenModifierNames) {
                window.seenModifierIds = new Set();
                window.seenModifierNames = new Set();
            }


            modifiers.forEach(modifier => {
                // Check if this modifier is not in existing modifiers
                // and not already added to newModifiers
                if (
                    !window.existingModifierIds.includes(modifier.id) &&
                    !window.existingModifierName.includes(modifier.name) &&
                    !window.seenModifierIds.has(modifier.id) &&
                    !window.seenModifierNames.has(modifier.name)
                ) {
                    newModifiers.push(modifier);
                    window.seenModifierIds.add(modifier.id);
                    window.seenModifierNames.add(modifier.name);
                }
            });

            console.log(window.seenModifierIds);




            if (newModifiers.length === 0) {
                @* alert('All selected modifiers already added!'); *@
                    toastr.error('All selected modifiers already added!')
                return;
            }

            const container = $('#tempSelectedModifiers');
            newModifiers.forEach(function (modifier) {
                $.ajax({
                    url: '@Url.Action("GetExistingModifiersbyModifierId", "Modifiers")',
                    type: 'GET',
                    data: { id: modifier.id },
                    success: function (response) {
                        container.append(response);
                    },
                    error: function () {
                        alert('Error loading Modifiers');
                    }
                });
            });
        }
    });
</script>