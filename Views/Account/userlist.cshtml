@model pizzashop.Models.ViewModels.UserListViewModel

<div style="width: 100%;background-color: #f3f3f3;margin-top: 40px;">
    <div class="userlist-searchbar"
        style="display: flex; width: 100%;height: 7%;justify-content: space-between;padding-top: 10px;align-items: center; flex-wrap: wrap; gap: 15px;">
        <h1 style="margin-left: 3%;color: #006cac;">Users</h1>
        <div class="search-add" style="padding-right: 3%;display: flex; flex-wrap: wrap; gap: 10px;align-items: center;"">
            <div class=" filter-container d-flex me-2">
            <select id="roleFilter" class="form-select me-2">
                <option value="">All Roles</option>
                @foreach (var role in Model.Role)
                {
                    <option value="@role.Id">@role.Role1</option>
                }
            </select>
            <select id="statusFilter" class="form-select">
                <option value="">All Status</option>
                <option value="true">Active</option>
                <option value="false">Inactive</option>
            </select>
        </div>
        <div class="position-relative me-2">
            <input type="text" id="searchInput" placeholder="Search" aria-label="Search" class="form-control"
                value="@Model.SearchTerm" style="width: 200px;height: 52px;border: 2px solid #eee;border-radius: 4px;">
            <i class="bi bi-search" style="position: absolute;right: 10px;top: 15px;"></i>
        </div>
        <button class="adduser-btn" onclick="window.location.href='@Url.Action("addnewuser", "Account")'">+Add
            User</button>
    </div>
</div>
<div class="content" style="display: flex;align-items: center;justify-content: center;padding-top: 40px;">
    <div class="shadow" style="background-color: white;width: 95%;">
        <div id="userTableContainer">
            <!-- The partial view will be loaded here -->
            @await Html.PartialAsync("_UserTable", Model)
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script>

        // Global variables to store current filter state
        let currentPage = @Model.CurrentPage;
        let pageSize = @Model.PageSize;
        let searchTerm = "@Model.SearchTerm";
        let roleFilter = @(Model.RoleFilter.HasValue? Model.RoleFilter.Value.ToString() : "null");
        let statusFilter = @(Model.StatusFilter.HasValue ? (Model.StatusFilter.Value ? "true" : "false") : "null");

        // Function to load user table with filters
        function loadUserTable() {
            $.ajax({
                url: '@Url.Action("userlist", "Account")',
                type: 'GET',
                data: {
                    page: currentPage,
                    search: searchTerm,
                    roleId: roleFilter,
                    status: statusFilter,
                    pageSize: pageSize
                },
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                success: function (result) {
                    $('#userTableContainer').html(result);

                    $('#pageSizeSelect').val(pageSize);

                    // Reattach event handlers after updating content
                    attachEventHandlers();

                    // Update browser URL to support bookmarking and browser back button
                    updateUrl();
                }
            });
        }

        // Function to update URL with query parameters
        function updateUrl() {
            let url = new URL(window.location.href);
            url.searchParams.set('page', currentPage);

            if (searchTerm) url.searchParams.set('search', searchTerm);
            else url.searchParams.delete('search');

            if (roleFilter !== null) url.searchParams.set('roleId', roleFilter);
            else url.searchParams.delete('roleId');

            if (statusFilter !== null) url.searchParams.set('status', statusFilter);
            else url.searchParams.delete('status');

            url.searchParams.set('pageSize', pageSize);

            window.history.replaceState({}, '', url);
        }

        // Function to attach event handlers
        function attachEventHandlers() {
            // Delete modal handler
            var deleteModal = document.getElementById('deleteModal');
            deleteModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var userId = button.getAttribute('data-id');
                var userIdInput = deleteModal.querySelector('#userId');
                userIdInput.value = userId;
            });

            // Pagination handlers
            $('#prevPageBtn').click(function () {
                if (currentPage > 1) {
                    currentPage--;
                    loadUserTable();
                }
            });

            $('#nextPageBtn').click(function () {
                currentPage++;
                loadUserTable();
            });

            // Page size change handler
            $('#pageSizeSelect').change(function () {
                pageSize = $(this).val();
                currentPage = 1; // Reset to first page when changing page size
                loadUserTable();
            });
        }

        $(document).ready(function () {
            // Set initial selected values for filters
            if (roleFilter !== null) {
                $('#roleFilter').val(roleFilter);
            }

            if (statusFilter !== null) {
                $('#statusFilter').val(statusFilter.toString());
            }

            // Set initial page size
            $('#pageSizeSelect').val(pageSize);

            // Attach initial event handlers
            attachEventHandlers();

            // Search input handler with debounce
            let searchTimeout;
            $('#searchInput').on('input', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function () {
                    searchTerm = $('#searchInput').val();
                    currentPage = 1; // Reset to first page when searching
                    loadUserTable();
                }, 500); // 500ms delay to reduce server load
            });

            // Role filter handler
            $('#roleFilter').change(function () {
                roleFilter = $(this).val() || null;
                currentPage = 1; // Reset to first page when filtering
                loadUserTable();
            });

            // Status filter handler
            $('#statusFilter').change(function () {
                statusFilter = $(this).val() || null;
                currentPage = 1; // Reset to first page when filtering
                loadUserTable();
            });
        });
    </script>
}